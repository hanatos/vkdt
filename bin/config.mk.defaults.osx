# build time configuration.
# select your favourite bloat here.
# this is the default file which is always loaded. please don't edit it
# directly, it will be overwritten by a new version that may come with a git
# pull or so. if 'config.mk' exists, it will be loaded after this, so you can
# overwrite the settings in here by copying the file over and making changes
# there.

# needed for jpeg input (currently not optional)
VKDT_JPEG_CFLAGS=$(eval VKDT_JPEG_CFLAGS := $$(shell pkg-config --cflags libjpeg))$(VKDT_JPEG_CFLAGS)
VKDT_JPEG_LDFLAGS=$(eval VKDT_JPEG_LDFLAGS := $$(shell pkg-config --libs libjpeg))$(VKDT_JPEG_LDFLAGS)
export VKDT_JPEG_CFLAGS VKDT_JPEG_LDFLAGS

# if you disable this, the i-raw module will not be built
# and you will be unable to load raw images.
# note that since this in on by default in here, you'll need
# to explicitly set it to =0 and export again in config.mk to
# switch it off effectively.
# switched off:
# VKDT_USE_RAWINPUT=0
# rawspeed  (c++):
# VKDT_USE_RAWINPUT=1
# rawler (rust):
VKDT_USE_RAWINPUT=2
export VKDT_USE_RAWINPUT

CMAKE=cmake
export CMAKE

# needed for rawspeed (RAWINPUT=1) only
# VKDT_PUGIXML_CFLAGS=$(eval VKDT_PUGIXML_CFLAGS := $$(shell pkg-config --cflags pugixml))$(VKDT_PUGIXML_CFLAGS)
# VKDT_PUGIXML_LDFLAGS=$(eval VKDT_PUGIXML_LDFLAGS := $$(shell pkg-config --libs pugixml))$(VKDT_PUGIXML_LDFLAGS)
# export VKDT_PUGIXML_CFLAGS VKDT_PUGIXML_LDFLAGS

# exiv2 can optionally be used to load some super basic metadata (iso
# speed, shutter time etc) inside the i-raw module when using rawspeed.
# that is, it is only effective if VKDT_USE_RAWINPUT=1.
# VKDT_USE_EXIV2=1
# export VKDT_USE_EXIV2
# VKDT_EXIV2_CFLAGS=$(eval VKDT_EXIV2_CFLAGS := $$(shell pkg-config --cflags exiv2))$(VKDT_EXIV2_CFLAGS)
# VKDT_EXIV2_LDFLAGS=$(eval VKDT_EXIV2_LDFLAGS := $$(shell pkg-config --libs exiv2))$(VKDT_EXIV2_LDFLAGS)
# export VKDT_EXIV2_CFLAGS VKDT_EXIV2_LDFLAGS

# v4l2 is used to read real-time webcam input in the i-v4l2 module.
# enable this feature here:
VKDT_USE_V4L2=0
export VKDT_USE_V4L2

# we use GPL3 code in the i-mlv magic lantern raw video input
# module. if you don't want it, leave it disabled here. if
# you want video, you probably also want VKDT_USE_ALSA=1, see below.
VKDT_USE_MLV=1
export VKDT_USE_MLV

# to play the audio that comes with the mlv video, vkdt uses
# alsa. this introduces an asound dependency. disable here:
VKDT_USE_ALSA=0
export VKDT_USE_ALSA

# build the i-mcraw loader module to load raw video from the motioncam app.
# it has no additional dependencies but comes with several ten thousand lines of c++ code
VKDT_USE_MCRAW=1
export VKDT_USE_MCRAW

# for the i-vid module using libavformat/libavcodec to read
# video streams, we depend on these libraries
# note that vkdt requires ffmpeg version > 5 (6 is first good)
FFMPEG_VERSION=$(shell ffmpeg -version | head -1 | cut -f 3 -d' ' | cut -d. -f1)
VKDT_USE_FFMPEG=$(eval VKDT_USE_FFMPEG := $$(shell [ $(FFMPEG_VERSION) -gt 5 ] && echo 1 || echo 0))
export VKDT_USE_FFMPEG
VKDT_AV_CFLAGS=$(eval VKDT_AV_CFLAGS := $$(shell pkg-config --cflags libavformat --cflags libavcodec --cflags libavutil --cflags libswresample))$(VKDT_AV_CFLAGS)
VKDT_AV_LDFLAGS=$(eval VKDT_AV_LDFLAGS := $$(shell pkg-config --libs libavformat --libs libavcodec --libs libavutil --libs libswresample))$(VKDT_AV_LDFLAGS)
export VKDT_AV_CFLAGS VKDT_AV_LDFLAGS

# where to find glfw for the gui:
VKDT_GLFW_CFLAGS=$(eval VKDT_GLFW_CFLAGS := $$(shell pkg-config --cflags glfw3))$(VKDT_GLFW_CFLAGS)
VKDT_GLFW_LDFLAGS=$(eval VKDT_GLFW_LDFLAGS := $$(shell pkg-config --libs glfw3))$(VKDT_GLFW_LDFLAGS)
export VKDT_GLFW_CFLAGS VKDT_GLFW_LDFLAGS

# enable this if you have a custom build of glfw that supports the following
# three functions: glfwSetPenTabletDataCallback,
# glfwSetPenTabletCursorCallback, glfwSetPenTabletProximityCallback.
# VKDT_USE_PENTABLET=1
# export VKDT_USE_PENTABLET

# if this is enabled, it will build the i-quake module. it runs
# the quakespasm variant of the id software code for the classic quake
# game. it assumes you have the paks in /usr/share/games/quake.
# this will download and compile GPL code.
# VKDT_USE_QUAKE=1
# export VKDT_USE_QUAKE
# VKDT_QEXTRA_CFLAGS=$(eval VKDT_QEXTRA_CFLAGS := $$(shell pkg-config --cflags vorbis vorbisfile ogg mad))$(VKDT_QEXTRA_CFLAGS)
# VKDT_QEXTRA_LDFLAGS=$(eval VKDT_QEXTRA_LDFLAGS := $$(shell pkg-config --libs vorbis vorbisfile ogg mad))$(VKDT_QEXTRA_LDFLAGS)
# export VKDT_QEXTRA_CFLAGS VKDT_QEXTRA_LDFLAGS

# need vulkan
VKDT_VULKAN_CFLAGS=$(eval VKDT_VULKAN_CFLAGS :=-DVK_USE_PLATFORM_MACOS_MVK -DVK_ENABLE_BETA_EXTENSIONS $$(shell pkg-config --cflags vulkan))$(VKDT_VULKAN_CFLAGS)
VKDT_VULKAN_LDFLAGS=$(eval VKDT_VULKAN_LDFLAGS := $$(shell pkg-config --libs vulkan))$(VKDT_VULKAN_LDFLAGS)
VKDT_VULKAN_CFLAGS+= -DVK_ENABLE_BETA_EXTENSIONS
export VKDT_VULKAN_CFLAGS VKDT_VULKAN_LDFLAGS

# compiler config
CC=clang
CXX=clang++
GLSLC=glslangValidator
GLSLC_FLAGS=--target-env vulkan1.2
# GLSLC=glslc
# GLSLC_FLAGS=--target-env=vulkan1.2

# optimised flags, you may want to use -march=x86-64 for distro builds:
OPT_CFLAGS=-Werror -Wall -pipe -O3 -march=$(shell arch) -DNDEBUG
OPT_LDFLAGS=
AR=ar
DYNAMIC=-rdynamic -fvisibility=hidden

export CC CXX GLSLC GLSLC_FLAGS OPT_CFLAGS OPT_LDFLAGS AR DYNAMIC
