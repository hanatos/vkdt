#pragma once
// minimal postscript interpreter to draw decorative line patterns
// TODO: add transformations on vertices before tessellation
#include "nk.h"

static const float dt_draw_cmd_marker = -0.0f/0.0f;
enum dt_draw_cmd_t
{
  dt_draw_moveto    = 1,
  dt_draw_lineto    = 2,
  dt_draw_curveto   = 3,
  dt_draw_closepath = 4,
  dt_draw_stroke    = 5,
};

// draw lists, exported from inkscape as postscript .ps and the relevant parts pasted below:
#define m dt_draw_cmd_marker,dt_draw_moveto
#define l dt_draw_cmd_marker,dt_draw_lineto
#define c dt_draw_cmd_marker,dt_draw_curveto
#define h dt_draw_cmd_marker,dt_draw_closepath
#define S dt_draw_cmd_marker,dt_draw_stroke
// TODO: we don't do store/restore (q Q) and transforms (cm) and width (w)
//386.688, 65.719, m, S, Q
// q, 1, 0, 0, 1, 0, 0, cm
// dualshock gamepad:
static const float dt_draw_list_gamepad[] = {
74.488, 29.387, m, 90.566, 20.512, 109.48, 18.832, 128.543, 26.438, c, 128.543, 38.777
, l, 74.488, 38.777, l, h, S,
396.148, 29.387, m, 380.07, 20.512, 361.156, 18.832, 342.094, 26.438, c, 342.094, 
38.777, l, 396.148, 38.777, l, h, S,
103.457, 27.805, m, 91.012, 27.77, 78.844, 30.168, 69.879, 35.105, c, 64.57, 45.855
, 50.625, 60.234, 44.863, 83.391, c, 24.301, 152.148, 18.613, 210.246, 15.805, 245.105
, c, 15.805, 271.945, 37.555, 293.703, 64.395, 293.703, c, 86.078, 293.703, 103.512
, 281.078, 110.32, 259.047, c, 130.203, 201.945, l, 133.16, 197.238, 140.398, 195.305
, 144.996, 194.797, c, 325.641, 194.797, l, 330.238, 195.305, 337.473, 197.238, 340.434
, 201.945, c, 360.316, 259.047, l, 367.125, 281.078, 384.559, 293.703, 406.238, 293.703
, c, 433.078, 293.703, 454.828, 271.945, 454.828, 245.105, c, 452.02, 210.246, 446.336
, 152.148, 425.77, 83.391, c, 420.008, 60.234, 406.066, 45.855, 400.754, 35.105, c, 
391.789, 30.168, 379.621, 27.77, 367.176, 27.805, c, 354.734, 27.84, 342.008, 30.312
, 331.945, 35.105, c, 138.688, 35.105, l, 128.629, 30.312, 115.902, 27.84, 103.457, 
27.805, c, h, S,
150.035, 98.309, m, 150.039, 111.809, 144.68, 124.754, 135.137, 134.301, c, 125.594
, 143.848, 112.648, 149.211, 99.148, 149.211, c, 85.648, 149.211, 72.703, 143.848, 
63.16, 134.301, c, 53.617, 124.754, 48.258, 111.809, 48.262, 98.309, c, 48.258, 84.812
, 53.617, 71.863, 63.16, 62.316, c, 72.703, 52.77, 85.648, 47.406, 99.148, 47.406, c
, 112.648, 47.406, 125.594, 52.77, 135.137, 62.316, c, 144.68, 71.863, 150.039, 84.812
, 150.035, 98.309, c, h, S,
98.004, 104.121, m, 97.391, 104.121, 96.723, 104.246, 95.891, 104.797, c, 88.383, 
112.039, l, 87.781, 112.613, 87.367, 113.234, 87.082, 114.059, c, 85.965, 127.664, 
l, 86.707, 130.453, 88.469, 132.32, 91.344, 132.844, c, 96.352, 133.238, 100.195, 133.176
, 104.664, 132.844, c, 107.539, 132.32, 109.309, 130.453, 110.051, 127.664, c, 108.934
, 114.059, l, 108.652, 113.234, 108.234, 112.613, 107.637, 112.039, c, 100.125, 104.797
, l, 99.293, 104.246, 98.617, 104.121, 98.004, 104.121, c, h, S,
98.004, 91.031, m, 97.391, 91.031, 96.723, 90.906, 95.891, 90.355, c, 88.383, 83.109
, l, 87.781, 82.539, 87.367, 81.918, 87.082, 81.094, c, 85.965, 67.488, l, 86.707, 64.699
, 88.469, 62.832, 91.344, 62.309, c, 96.352, 61.914, 100.195, 61.977, 104.664, 62.309
, c, 107.539, 62.832, 109.309, 64.699, 110.051, 67.488, c, 108.934, 81.094, l, 108.652
, 81.918, 108.234, 82.539, 107.637, 83.109, c, 100.125, 90.355, l, 99.293, 90.906, 98.617
, 91.031, 98.004, 91.031, c, h, S,
104.57, 97.543, m, 104.57, 98.156, 104.699, 98.82, 105.25, 99.652, c, 112.492, 107.164
, l, 113.062, 107.766, 113.684, 108.18, 114.508, 108.465, c, 128.117, 109.582, l, 130.906
, 108.836, 132.773, 107.078, 133.297, 104.203, c, 133.691, 99.195, 133.629, 95.352
, 133.297, 90.883, c, 132.773, 88.008, 130.906, 86.238, 128.117, 85.492, c, 114.508
, 86.609, l, 113.684, 86.895, 113.062, 87.309, 112.492, 87.91, c, 105.25, 95.422, l, 
104.699, 96.254, 104.57, 96.93, 104.57, 97.543, c, h, S,
91.254, 97.531, m, 91.254, 96.922, 91.129, 96.254, 90.574, 95.422, c, 83.332, 87.91
, l, 82.762, 87.309, 82.141, 86.895, 81.316, 86.609, c, 67.707, 85.492, l, 64.922, 86.238
, 63.051, 87.996, 62.531, 90.871, c, 62.133, 95.879, 62.195, 99.727, 62.531, 104.191
, c, 63.051, 107.066, 64.922, 108.836, 67.707, 109.582, c, 81.316, 108.465, l, 82.141
, 108.18, 82.762, 107.766, 83.332, 107.164, c, 90.574, 99.652, l, 91.129, 98.82, 91.254
, 98.145, 91.254, 97.531, c, h, S,
423.238, 98.309, m, 423.242, 111.809, 417.883, 124.758, 408.34, 134.301, c, 398.793
, 143.848, 385.848, 149.211, 372.352, 149.211, c, 358.852, 149.211, 345.906, 143.848
, 336.363, 134.301, c, 326.816, 124.758, 321.457, 111.809, 321.461, 98.309, c, 321.457
, 84.812, 326.816, 71.863, 336.363, 62.316, c, 345.906, 52.77, 358.852, 47.406, 372.352
, 47.406, c, 385.848, 47.406, 398.793, 52.77, 408.34, 62.316, c, 417.883, 71.863, 423.242
, 84.812, 423.238, 98.309, c, h, S,
386.688, 65.719, m, 386.684, 73.262, 380.566, 79.375, 373.023, 79.375, c, 365.48, 
79.375, 359.363, 73.262, 359.359, 65.719, c, 359.359, 62.094, 360.797, 58.613, 363.359
, 56.051, c, 365.922, 53.488, 369.398, 52.047, 373.023, 52.047, c, 376.648, 52.047, 
380.125, 53.488, 382.688, 56.051, c, 385.25, 58.613, 386.688, 62.094, 386.688, 65.719
, c, h, S,
386.688, 129.57, m, 386.684, 137.113, 380.566, 143.23, 373.023, 143.23, c, 365.48
, 143.23, 359.363, 137.113, 359.359, 129.57, c, 359.359, 125.945, 360.797, 122.469
, 363.359, 119.906, c, 365.922, 117.34, 369.398, 115.902, 373.023, 115.902, c, 376.648
, 115.902, 380.125, 117.34, 382.688, 119.906, c, 385.25, 122.469, 386.688, 125.945
, 386.688, 129.57, c, h, S,
354.566, 97.465, m, 354.566, 105.012, 348.449, 111.129, 340.902, 111.129, c, 333.359
, 111.129, 327.238, 105.012, 327.238, 97.465, c, 327.238, 93.84, 328.68, 90.367, 331.242
, 87.805, c, 333.805, 85.242, 337.281, 83.801, 340.902, 83.801, c, 344.527, 83.801, 
348.004, 85.242, 350.566, 87.805, c, 353.129, 90.367, 354.566, 93.84, 354.566, 97.465
, c, h, S,
419.434, 97.465, m, 419.434, 105.008, 413.316, 111.121, 405.77, 111.121, c, 398.227
, 111.121, 392.109, 105.008, 392.109, 97.465, c, 392.105, 93.84, 393.543, 90.363, 396.105
, 87.801, c, 398.668, 85.234, 402.145, 83.793, 405.77, 83.793, c, 409.398, 83.793, 412.871
, 85.234, 415.438, 87.801, c, 418, 90.363, 419.438, 93.84, 419.434, 97.465, c, h, S,
191.543, 155.953, m, 191.543, 170.047, 180.113, 181.477, 166.02, 181.477, c, 151.926
, 181.477, 140.5, 170.047, 140.5, 155.953, c, 140.5, 149.184, 143.188, 142.695, 147.973
, 137.906, c, 152.762, 133.121, 159.25, 130.434, 166.02, 130.434, c, 172.789, 130.434
, 179.281, 133.121, 184.066, 137.906, c, 188.852, 142.695, 191.543, 149.184, 191.543
, 155.953, c, h, S,
331.48, 155.953, m, 331.48, 162.723, 328.789, 169.215, 324.004, 174, c, 319.219, 178.785
, 312.727, 181.477, 305.957, 181.477, c, 299.191, 181.477, 292.699, 178.785, 287.914
, 174, c, 283.125, 169.215, 280.438, 162.723, 280.438, 155.953, c, 280.438, 141.859
, 291.863, 130.434, 305.957, 130.434, c, 320.055, 130.434, 331.48, 141.859, 331.48
, 155.953, c, h, S,
146.379, 42.922, m, 142.52, 42.922, 139.395, 46.047, 139.395, 49.906, c, 139.395, 
60.551, l, 139.395, 64.41, 142.52, 67.539, 146.379, 67.539, c, 150.238, 67.539, 153.363
, 64.41, 153.363, 60.551, c, 153.363, 49.906, l, 153.363, 46.047, 150.238, 42.922, 146.379
, 42.922, c, h, S,
325.555, 42.922, m, 321.695, 42.922, 318.57, 46.047, 318.57, 49.906, c, 318.57, 60.551
, l, 318.57, 64.41, 321.695, 67.539, 325.555, 67.539, c, 329.414, 67.539, 332.539, 64.41
, 332.539, 60.551, c, 332.539, 49.906, l, 332.539, 46.047, 329.414, 42.922, 325.555
, 42.922, c, h, S,
246.32, 160.355, m, 246.324, 163.273, 245.164, 166.074, 243.102, 168.141, c, 241.035
, 170.207, 238.238, 171.367, 235.316, 171.367, c, 232.398, 171.367, 229.598, 170.207
, 227.535, 168.141, c, 225.469, 166.074, 224.312, 163.273, 224.312, 160.355, c, 224.312
, 157.438, 225.469, 154.637, 227.535, 152.57, c, 229.598, 150.504, 232.398, 149.344
, 235.316, 149.344, c, 238.238, 149.344, 241.035, 150.504, 243.102, 152.57, c, 245.164
, 154.637, 246.324, 157.438, 246.32, 160.355, c, h, S,
};
// arrows pointing to the buttons
static const float dt_draw_list_gamepad_arrow[][20] = {
{143.246, 169.57, m, 32.777, 260.625, l, -137.781, 261.77, l, S},
{323.477, 174.398, m, 413.711, 260.547, l, 588.363, 260.996, l, S},
{90.871, 21.934, m, 66.652, -10.746, l, -136.203, -9.57, l, S},
{384.836, 24.336, m, 434.609, -11.016, l, 587.93, -11.012, l, S},
{373.504, 65.945, m, 458.934, 44.438, l, 587.77, 44.043, l, S},
{406.766, 97.645, m, 462.723, 86.527, l, 588.242, 85.637, l, S},
{373.82, 129.336, m, 454.578, 128.176, l, 588.234, 127.336, l, S},
{340.566, 98.203, m, 360.781, 168.645, l, 589.039, 170.395, l, S},
{112.438, 21.602, m, 82.77, -51.652, l, -136.754, -53.75, l, S},
{361.473, 21.148, m, 410.766, -51.82, l, 587.961, -52.711, l, S},
{97.215, 75.797, m, -8.457, 44.039, l, -135.887, 44.172, l, S},
{72.074, 97.508, m, -7.238, 84.77, l, -136.711, 85.52, l, S},
{97.016, 120.57, m, 11.598, 125.883, l, -136.855 , 127.207, l, S},
{126.355, 97.949, m, 99.895, 170.566, l, -137.996, 170.398, l, S},
{200.727, 114.797, m, 150.363, -93.09, l, -51.844, -92.754, l, S},
{261.641, 114.574, m, 306.43, -93.754, l, 502.551, -94.16, l, S},
{235.469, 160.25, m, 235.469, 337.348, l, 283.055, 337.348, l, S},
{165.594, 157.938, m, 115.074, 302.762, l, -136.211, 303.523, l, S},
{306.121, 156.926, m, 351.91, 303.555, l, 587.215, 302.441, l, S},
};
#undef m
#undef l
#undef c
#undef h
#undef S

#define xf(v, m) ({ struct nk_vec2 r = v; if(m) r = (struct nk_vec2){ \
    v.x * m[3*0 + 0] + v.y * m[3*0 + 1] + m[3*0 + 2], \
    v.x * m[3*1 + 0] + v.y * m[3*1 + 1] + m[3*1 + 2]};\
    r;})

static inline void
dt_draw(
    struct nk_context *ctx, // which nuklear context to draw to
    const float       *cmd, // command buffer
    const int          cnt, // number of commands
    // const int          det, // detail/how many points per bezier
    struct nk_color    col,
    const float       *m)   // 3x2 affine transform, optional
{
  struct nk_command_buffer *buf = nk_window_get_canvas(ctx);
  float stack[10];
  const int stacksize = NK_LEN(stack);
  int sp = 0;
  const float thickness = vkdt.state.center_ht / 300.0f;
  struct nk_vec2 pos = {0};
  struct nk_vec2 beg = {0};
  for(int i=0;i<cnt;i++)
  {
    if(!memcmp(cmd+i, &dt_draw_cmd_marker, sizeof(float)))
    {
      switch((int)cmd[++i])
      {
        case dt_draw_moveto:
          if(sp < 2) return; // stack underflow
          beg = pos = xf(((struct nk_vec2){stack[sp-2], stack[sp-1]}), m);
          sp -= 2;
          break;
        case dt_draw_lineto:
          if(sp < 2) return; // stack underflow
          struct nk_vec2 p = xf(((struct nk_vec2){stack[sp-2], stack[sp-1]}), m);
          nk_stroke_line(buf, pos.x, pos.y, p.x, p.y, thickness, col);
          pos = p;
          sp -= 2;
          break;
        case dt_draw_curveto:
          if(sp < 6) return; // stack underflow
          sp -= 6;
          struct nk_vec2 p1 = xf(((struct nk_vec2){stack[sp+0], stack[sp+1]}), m);
          struct nk_vec2 p2 = xf(((struct nk_vec2){stack[sp+2], stack[sp+3]}), m);
          struct nk_vec2 p3 = xf(((struct nk_vec2){stack[sp+4], stack[sp+5]}), m);
          nk_stroke_curve(buf, pos.x, pos.y, p1.x, p1.y, p2.x, p2.y, p3.x, p3.y, thickness, col);
          pos = p3;
          break;
        case dt_draw_closepath:
          nk_stroke_line(buf, pos.x, pos.y, beg.x, beg.y, thickness, col);
          break;
        default: // unknown command
          continue;
      }
    }
    else if(sp < stacksize) stack[sp++] = cmd[i];
    else return; // stack overflow
  }
}
#undef xf
