#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout( // input f16 buffer rgb
    set = 1, binding = 0
) uniform sampler2D img_in[];

layout( // output f16 buffer rgb
    set = 1, binding = 1
) uniform writeonly image2D img_out[];

vec4 dot9(float a[9], vec4 b[9])
{
  return a[0]*b[0] + a[1]*b[1] + a[2]*b[2] +
         a[3]*b[3] + a[4]*b[4] + a[5]*b[5] +
         a[6]*b[6] + a[7]*b[7] + a[8]*b[8];
}

// resample input image to new resolution (determined by region of interest,
// larger or smaller), using a catmull rom interpolation kernel
void
main()
{
  ivec2 opos = ivec2(gl_GlobalInvocationID);
  uint idx = gl_GlobalInvocationID.z;
  if(any(greaterThanEqual(opos, imageSize(img_out[idx])))) return;

  // use straight filter kernel, no reconstruction:
  // vec4 res = sample_soft(img_in[idx], (opos+0.5)/vec2(imageSize(img_out[idx])));
  vec4 res = sample_catmull_rom(img_in[idx], (opos+0.5)/vec2(imageSize(img_out[idx])));
  imageStore(img_out[idx], opos, res);
  return;

  // the scale factor from input to output image, if it's not 2:
  vec2 scale = vec2(imageSize(img_out[idx])) / vec2(textureSize(img_in[idx], 0));
// #define align
#ifdef align // get pixel centers in low res and upsample coherently
  // the center of the 3x3 region on the low-res input image:
  const vec2 ipxc = floor(opos / scale);
  // distance to 3x3 center on high-res output image, scaled down to input coordinate system:
  const vec2 ff = (opos + 0.5)/scale - (ipxc + 0.5);
#else // grab whatever pixels are in a symmetric stencil and evaluate at zero
  const vec2 ipxc = (opos + 0.5)/scale;
  const vec2 ff = vec2(0.0);
#endif

  // fit and evaluate a quadric to the 3x3 environment:
  // we have a surrounding set of points
  // find sub-pixel minimum by fitting a presumably positive semi definite
  // quadratic polynomial to the 2d field. this follows hasinoff [2016] sec 4
  // in their supplemental material.
  // D_sub_2 (eq 14) from the paper, linearised into one vector
  vec4 D_sub_2[9];
  for(int jj=-1;jj<=1;jj++)
    for(int ii=-1;ii<=1;ii++)
      D_sub_2[3*(jj+1)+ii+1] =
#ifdef align
        texture(img_in[idx], (ipxc+0.5+vec2(ii,jj))/vec2(textureSize(img_in[idx], 0)));
#else
        texture(img_in[idx], (ipxc+vec2(ii,jj))/vec2(textureSize(img_in[idx], 0)));
#endif

  // filter banks:
  const float F_A11[] = float[](
      1/4.0, -2/4.0, 1/4.0,
      2/4.0, -4/4.0, 2/4.0,
      1/4.0, -2/4.0, 1/4.0
      );
  const float F_A22[] = float[](
      1/4.0,  2/4.0,  1/4.0,
     -2/4.0, -4/4.0, -2/4.0,
      1/4.0,  2/4.0,  1/4.0
      );
  const float F_A12[] = float[](
      1/4.0, 0, -1/4.0,
          0, 0,  0,
     -1/4.0, 0,  1/4.0
      );
  const float F_b1[] = float[](
     -1/8.0, 0, 1/8.0,
     -2/8.0, 0, 2/8.0,
     -1/8.0, 0, 1/8.0
      );
  const float F_b2[] = float[](
     -1/8.0, -2/8.0, -1/8.0,
      0/8.0,  0/8.0,  0/8.0,
      1/8.0,  2/8.0,  1/8.0
      );
  const float F_c[] = float[](
     -1/16.0,  2/16.0, -1/16.0,
      2/16.0, 12/16.0,  2/16.0,
     -1/16.0,  2/16.0, -1/16.0
      );

  const vec4 A0 = dot9(F_A11, D_sub_2);
  const vec4 A1 = dot9(F_A12, D_sub_2);
  const vec4 A2 = dot9(F_A22, D_sub_2);
  const vec4 b0 = dot9(F_b1,  D_sub_2);
  const vec4 b1 = dot9(F_b2,  D_sub_2);
  const vec4 c  = dot9(F_c, D_sub_2);
  const mat2 Ar = mat2(A0.r, A1.r, A1.r, A2.r);
  const mat2 Ag = mat2(A0.g, A1.g, A1.g, A2.g);
  const mat2 Ab = mat2(A0.b, A1.b, A1.b, A2.b);
  const mat2 Aa = mat2(A0.a, A1.a, A1.a, A2.a);
  const vec2 br = vec2(b0.r, b1.r);
  const vec2 bg = vec2(b0.g, b1.g);
  const vec2 bb = vec2(b0.b, b1.b);
  const vec2 ba = vec2(b0.a, b1.a);
  // evaluate 1/2xAx + bx + c:
  vec4 rgba = vec4(
      0.5 * dot(ff, Ar*ff) + dot(br, ff) + c.r,
      0.5 * dot(ff, Ag*ff) + dot(bg, ff) + c.g,
      0.5 * dot(ff, Ab*ff) + dot(bb, ff) + c.b,
      0.5 * dot(ff, Aa*ff) + dot(ba, ff) + c.a);

  vec4 m = D_sub_2[0];
  for(int i=1;i<9;i++) m = min(m, D_sub_2[i]);
  rgba = max(rgba, m); // make sure we don't get negative ringing, that really sucks. the max peak however we are actively looking for.
  imageStore(img_out[idx], opos, rgba);
}

