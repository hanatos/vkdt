#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"
layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;
layout(push_constant, std140) uniform push_t
{
  int grey;
} pc;

layout(set = 1, binding = 0) uniform sampler2D img_in;
layout(set = 1, binding = 1) uniform sampler2D img_ab;
layout(set = 1, binding = 2) uniform writeonly image2D img_out;

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  float lum0;
  if(pc.grey == 0)
    lum0 = luminance_rec2020(texelFetch(img_in, ipos, 0).rgb);
  else
    lum0 = texelFetch(img_in, ipos, 0).r;
  vec2 ab = texture(img_ab, (ipos + 0.5)/vec2(imageSize(img_out))).rg;
  float lum1 = ab.r * lum0 + ab.g;
  imageStore(img_out, ipos, vec4(vec3(lum1), 1.0));
}
