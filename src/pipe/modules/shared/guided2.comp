#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(push_constant, std140) uniform push_t
{
  float radius;
  float epsilon;
} pc;

layout(set = 1, binding = 0) uniform sampler2D img_in;
layout(set = 1, binding = 1) uniform writeonly image2D img_out;

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  const vec2 mean_corr = texture(img_in, (ipos+0.5)/vec2(imageSize(img_out))).rg;
  const float var = mean_corr.y - mean_corr.x * mean_corr.x;
  const float a = var / (var + pc.epsilon*pc.epsilon*1e-3);
  const float b = mean_corr.x - a * mean_corr.x;
  imageStore(img_out, ipos, vec4(a, b, 0.0, 0.0));
}
