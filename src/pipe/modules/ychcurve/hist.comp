// LDAP's merian histogram code stolen:
#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable
#include "shared.glsl"
layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(set = 1, binding = 0) uniform sampler2D img_src;
layout(set = 1, binding = 1, std430) buffer buf_hist { uint  histogram[]; };
layout(std140, set = 0, binding = 1) uniform params_t {
  vec4 abcdr[8];
  vec4 abcdg[8];
  vec4 abcdb[8];
  vec4 xr0, xr1;
  vec4 xg0, xg1;
  vec4 xb0, xb1;
  vec4 yr0, yr1;
  vec4 yg0, yg1;
  vec4 yb0, yb1;
  int  cntr, cntg, cntb;
  int  sel;
  int  mode;
  int  chan;
  float ddr0, ddrn;
  float ddg0, ddgn;
  float ddb0, ddbn;
  int  edit;
} params;
#include "spline.glsl"
const uint hist_size = gl_WorkGroupSize.x * gl_WorkGroupSize.y;
shared uint[hist_size] local_hist;
shared uint count;

uint get_bin(vec3 rgb)
{
  float l = 0.0;
  if     (params.chan == 0) l = rgb.r;
  else if(params.chan == 1) l = rgb.g;
  else if(params.chan == 2) l = rgb.b;
  // else if(params.chan == 0) l = luminance_rec2020(rgb);
  l = l2e(l);
  uint bin = uint(hist_size * l + 0.5);
  return clamp(bin, 0, hist_size - 1);
}

void main()
{
  const ivec2 ipos = ivec2(gl_GlobalInvocationID);

  local_hist[gl_LocalInvocationIndex] = 0;
  if (gl_LocalInvocationIndex == 0) count = 0;
  barrier();

  const ivec2 isize = textureSize(img_src, 0);
  if (all(lessThan(ipos, isize)))
  {
    vec3 color = texelFetch(img_src, ipos, 0).rgb;
    const uint bin = get_bin(color);
    if(bin > 0)
    {
      atomicAdd(local_hist[bin], 1);
      atomicAdd(count, 1);
    }
  }
  barrier();

  atomicAdd(histogram[gl_LocalInvocationIndex], local_hist[gl_LocalInvocationIndex]);
  if (gl_LocalInvocationIndex == 0) atomicAdd(histogram[hist_size], count);
}

