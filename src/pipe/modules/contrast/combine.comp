#version 460
#extension GL_GOOGLE_include_directive    : enable

#include "shared.glsl"

layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;

layout(std140, set = 0, binding = 1) uniform params_t
{
  float radius;
  float edges;
  float detail;
  float thrs;
} params;

layout(set = 1, binding = 0) uniform sampler2D img_in;
layout(set = 1, binding = 1) uniform sampler2D img_coarse;
layout(set = 1, binding = 2) uniform writeonly image2D img_out;

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  vec3  rgb = texelFetch(img_in, ipos, 0).rgb;
  float crs = texture(img_coarse, (ipos+0.5)/vec2(imageSize(img_out))).r;

  float l0 = luminance_rec2020(rgb);
  float l1 = crs;

  float d = l0 - l1;
  float lum = l1 + sign(d) * (params.detail * max(0.0, abs(d) - params.thrs));
  // colour reconstruction: keep rgb saturation ratio same as before
  rgb *= clamp(lum/max(l0, 0.01), 0.0, 4.0);
  imageStore(img_out, ipos, vec4(rgb, 1));
}
