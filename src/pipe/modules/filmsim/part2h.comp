#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable
#include "head.glsl"
layout(set = 1, binding = 4) uniform sampler2D img_hal;
layout(push_constant, std140) uniform push_t
{
  float scale;
} push;

void main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;
  // load halation + raw exposed film
  vec3 log_raw = texture(img_in,  (ipos+0.5)/vec2(imageSize(img_out))).rgb;
  vec3 hal = texture(img_hal, (ipos+0.5)/vec2(imageSize(img_out))).rgb;
  hal /= 4.0;
  hal *= hal;
  hal *= hal;
  hal = 10.0*hal / (10.0 + hal);
  vec3 hs = params.halation_strength.rgb;
  vec3 raw = pow(vec3(10.0), log_raw);
  const float one_log10 = 0.43429448190325176;
  // the original python code normalised the raw exposure
  // like this:
  //  log_raw = log((raw+hs*hal)/(1.0+hs))*one_log10;
  // but this pulls down the average and thus changes wb settings
  // because it meets the film/paper curves in different regions.
  // we sum it, maybe violating energy conservation but making the
  // result more predictable:
  log_raw = log((raw+hs*hal))*one_log10;
  vec3 density_cmy = develop_film(log_raw, params.film, ipos, push.scale);
  if(params.process == 0)
  {
    log_raw = enlarger_expose_film_to_paper(density_cmy);
    density_cmy = develop_print(log_raw);
  }
  vec3 rgb = scan(density_cmy);
  imageStore(img_out, ipos, vec4(rgb, 1));
}
