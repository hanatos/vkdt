#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable
#include "shared.glsl"
layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;
layout(std140, set = 0, binding = 1) uniform params_t
{
  int color;    // bt.709, bt.2020
  int trc;      // linear, bt.709, smpte2084, HLG
  int bits;     // 8, 10, 12, 16
  int chr;      // 420, 422, 444, we don't care here
  int colrange; // 16-235/240, 0-255
} params;

layout(set = 1, binding = 0) uniform sampler2D img_in[];
layout(set = 1, binding = 1) uniform writeonly image2D img_out;

void
main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  float Y = texelFetch(img_in[0], ipos, 0).r;
  float u = texture(img_in[1], (ipos+0.5)/vec2(imageSize(img_out))).r;
  float v = texture(img_in[2], (ipos+0.5)/vec2(imageSize(img_out))).r;

  vec3 rgb = vec3(0.0);
  if(params.color == 0 || params.color == 1)
  { // says the ITU-R BT.2087-0
    vec3 YCbCr = vec3(Y,u,v) * 65535; // un-normalize back to integer codes
    if(params.colrange == 0)
    {
      // D'YCbCr -> E'YCbCr : de-scale range Q_YC
      //
      // D'Y  = (219 * E'Y  +  16) * 2^(bits-8)
      // D'Cb = (224 * E'Cb + 128) * 2^(bits-8)
      // D'Cr = (224 * E'Cr + 128) * 2^(bits-8)
      if     (params.bits == 0) YCbCr = (YCbCr - vec3(16.0, 128.0, 128.0 )     )/ vec3(219.0, 224.0, 224.0);
      else if(params.bits == 1) YCbCr = (YCbCr - vec3(16.0, 128.0, 128.0)*  4.0)/(vec3(219.0, 224.0, 224.0)*  4.0);
      else if(params.bits == 2) YCbCr = (YCbCr - vec3(16.0, 128.0, 128.0)* 16.0)/(vec3(219.0, 224.0, 224.0)* 16.0);
      else if(params.bits == 3) YCbCr = (YCbCr - vec3(16.0, 128.0, 128.0)*256.0)/(vec3(219.0, 224.0, 224.0)*256.0);
    }
    else if(params.colrange == 1)
    { // full-range - see Rec. ITU-T H.264 section E.2.1
      //
      // D'Y  = E'Y  * (2^bits - 1)
      // D'Cb = E'Cb * (2^bits - 1) + 2^(bits-1)
      // D'Cr = E'Cr * (2^bits - 1) + 2^(bits-1)
      if      (params.bits == 0) YCbCr = YCbCr /   255.0 - vec3(0.0,   128.0 /  255.0,   128.0 /   255.0);
      else if (params.bits == 1) YCbCr = YCbCr /  1023.0 - vec3(0.0,   512.0 / 1023.0,   512.0 /  1023.0);
      else if (params.bits == 2) YCbCr = YCbCr /  4095.0 - vec3(0.0,  2048.0 / 4095.0,  2048.0 /  4095.0);
      else if (params.bits == 3) YCbCr = YCbCr / 65535.0 - vec3(0.0, 32768.0 /65535.0, 32768.0 / 65535.0);
    }
    if(params.color == 1)
    {
      //
      // E'YCbCr -> E'RGB   : de-apply the matrix M3
      //           |  0.2627          0.6780          0.0593        |  |E'R|
      // E'YCbCr = | -0.2627/1.8814  -0.6780/1.8814   0.5           |  |E'G|
      //           |  0.5            -0.6780/1.4746  -0.0593/1.4746 |  |E'B|
      //
      mat3 M3I = mat3(1, 1, 1,
          0.0, -0.164553127, 1.8814,
          1.4746, -0.571353127, 0.0);
      rgb = M3I * YCbCr;
      // E'      -> E RGB   : de-apply tone curve (E' = E^(1/2.4)  or E' = E^(1/2))
      // (we'll use smpte 2084 for this)
    }
    else if(params.color == 0)
    {
      // E'YCbCr -> E'RGB   : apply the matrix M1
      mat3 M1 = mat3(1.0, 1.0, 1.0,
        0.0, -0.0722 * 1.8556 / 0.7152, 1.8556,
        1.5748, -0.2126 * 1.5748 / 0.7152, 0.0);
      rgb = M1 * YCbCr;
    }
      }

  if(params.trc == 1)
  { // bt.709
    rgb = mix(pow((rgb+0.099)/(1.0+0.099), vec3(1.0/0.45)), rgb/4.5, lessThan(rgb, vec3(0.081)));
  }
  else if(params.trc == 2)
  { // undo PQ / SMPTE ST 2084
    const float m1 = 1305.0/8192.0;
    const float m2 = 2523.0/32.0;
    const float c1 = 107.0/128.0;
    const float c2 = 2413.0/128.0;
    const float c3 = 2392.0/128.0;
    const vec3 xpow = pow(rgb, vec3(1.0/m2));
    const vec3 num = max(xpow - c1, vec3(0.0));
    const vec3 den = max(c2 - c3 * xpow, 1e-10);
    rgb = 100.0 * pow(num/den, vec3(1.0/m1)); // wtf ??
    // zscale says for the fwd application:
    // More stable arrangement that avoids some cancellation error.
    // float num = (ST2084_C1 - 1.0f) + (ST2084_C2 - ST2084_C3) * xpow;
    // float den = 1.0f + ST2084_C3 * xpow;
    // x = zimg_x_powf(1.0f + num / den, ST2084_M2);
  }
  else if(params.trc == 2)
  { // HLG FIXME: this seems broken
    // invert this
    // E' = r sqrt(E)           0 <=E <=1
    //    = a log(E - b) + c    1 < E
    //    a = 0.17883277, b = 1 - 4a = 0.28466892, and c = 0.5 - a ln(4a) = 0.55991073
    // r is reference white level (=1? )
    const float r = 1.0; // reference white
    const float a = 0.17883277, b = /*1.0 - 4.0*a =*/ 0.28466892, c = /*0.5 - a*log(4.0*a) =*/ 0.55991073;
    // rgb = mix(exp((rgb-c)/a) + b, rgb/r*rgb/r, lessThanEqual(rgb, vec3(r)));
    // if E' <= r:  E = (E'/r)^2; else E = exp((E'-c)/a) + b
    // zscale says:
    rgb = mix((exp((rgb-c)/a) + b)/12.0, rgb*rgb/3.0, lessThanEqual(rgb, vec3(0.5)));
  }

  if(params.color == 0)
  { // go to pipeline internal bt.2020 representation
    mat3 rec709_to_rec2020 = mat3(
        0.62750375, 0.32927542, 0.04330267,
        0.06910828, 0.91951917, 0.0113596 ,
        0.01639406, 0.08801128, 0.89538036);
    rgb *= rec709_to_rec2020;
  }
  imageStore(img_out, ipos, vec4(rgb, 1));
}

