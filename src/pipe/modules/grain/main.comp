#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_nonuniform_qualifier    : enable
#include "shared.glsl"
layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;
layout(std140, set = 0, binding = 0) uniform global_t
{
  uint frame;
} global;
layout(std140, set = 0, binding = 1) uniform params_t
{
  float size;
  float magnitude;
} params;
layout(set = 1, binding = 0) uniform sampler2D img_in;
layout(set = 1, binding = 1) uniform writeonly image2D img_out;

vec2 hash(in vec2 i)
{
  uint seed = uint(133700 * i.x + i.y * 37 + 13 * global.frame);
  seed = uint(4000300*mrand(seed));
  seed = uint(4070000*mrand(seed));
#if 1
  // approximate correction for std dev of uniform distribution
  float sigma = 1.7; // approximately correct for the uniform distribution [-1,1] instead of gaussian
  return sigma * (-1 + 2*vec2(mrand(seed), mrand(seed)));
#else
  return warp_gaussian(vec2(mrand(seed), mrand(seed)));
#endif
}

// (c) iq, MIT
float noise( in vec2 p )
{
  const float K1 = 0.366025404; // (sqrt(3)-1)/2;
  const float K2 = 0.211324865; // (3-sqrt(3))/6;

  vec2  i = floor( p + (p.x+p.y)*K1 );
  vec2  a = p - i + (i.x+i.y)*K2;
  float m = step(a.y,a.x);
  vec2  o = vec2(m,1.0-m);
  vec2  b = a - o + K2;
  vec2  c = a - 1.0 + 2.0*K2;
  vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );
  vec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));
  return dot( n, vec3(70.0) );
}

void main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, imageSize(img_out)))) return;

  vec3 rgb = texelFetch(img_in, ipos, 0).rgb;

  vec2 tc = 1.0/clamp(params.size, 0.6, 2.0) * 0.3 * vec2(ipos);
  // just summing the noise looks weird (becomes solid black at times).
  // let's say this changes the optical thickness of some film material instead:
#if 1 // logistic answer to film density:
  rgb = log(rgb / (1.0 - rgb));
  rgb += params.magnitude * noise(tc);
  rgb = exp(rgb) / (1.0 + exp(rgb));
#else
  float lum = luminance_rec2020(rgb);
  float sigma = clamp(lum, 0, 1);
  sigma = pow(sigma, 0.8);
  sigma = sigma * (1.0-sigma);
  rgb += clamp(rgb + params.magnitude * sigma * noise(tc), vec3(0.0), vec3(1.0)) - rgb;
#endif

  imageStore(img_out, ipos, vec4(rgb, 1));
}
