#version 460
#extension GL_GOOGLE_include_directive    : enable
#extension GL_EXT_shader_explicit_arithmetic_types_float16: enable

#include "shared.glsl"
layout(local_size_x = DT_LOCAL_SIZE_X, local_size_y = DT_LOCAL_SIZE_Y, local_size_z = 1) in;
layout(std140, set = 0, binding = 1) uniform params_t
{
  vec4  black;
  vec4  white;
  float noise_a;
  float noise_b;
} params;
layout(set = 1, binding = 0) uniform sampler2D img_in;
layout(std430, set = 1, binding = 1) buffer buf_t { float16_t v[]; } buf;

// TODO: replace this memory bandwidth hog by something integrated into the convolution layer
void main()
{
  ivec2 ipos = ivec2(gl_GlobalInvocationID);
  if(any(greaterThanEqual(ipos, textureSize(img_in, 0)))) return;

  float v = texelFetch(img_in, ipos, 0).r;
  const float s = params.white.r - params.black.r;
  // we assume a no-op denoise module has run before this and cropped ad rescaled and gainmapped the data for us:
  // v = (v*65535.0 - params.black.r)/s;
  // write out in ssbo index format, 5 channels
  const int ht = (textureSize(img_in, 0).y)/2;
  const int wd = (textureSize(img_in, 0).x)/2;
  const int cn = 4;
  int c = 1;
  if     (((ipos.x & 1)==0) && ((ipos.y & 1)==0)) c = 0;
  else if(((ipos.x & 1)==1) && ((ipos.y & 1)==0)) c = 1; // arg sorry trained the network with swapped greens
  else if(((ipos.x & 1)==0) && ((ipos.y & 1)==1)) c = 2;
  else if(((ipos.x & 1)==1) && ((ipos.y & 1)==1)) c = 3;
  const int idx = cn*(wd*(ipos.y/2) + ipos.x/2) + c;
  // const int idx = wd*ht * c + wd*(ipos.y/2) + ipos.x/2;
  // if(c == 0) v = float16_t(0);
  // if(c == 1 || c == 2) v = float16_t(0);
  // if(c == 3) v = float16_t(0);
  buf.v[idx] = float16_t(v);
#if 0 // network did not use it as simple as that anyways:
  if(c == 1)
  { // add noise estimate. could load it from painted input too
    // XXX this is how we apply noise a and b during training, with a ~exp(100/65k) and b~exp(2/65k).
    // XXX the noise profiling we run fits a and b to data that is still on the 16-bit range but has black subtracted.
    // XXX this means 1.0 means 65535 but the actual max value of v would potentially be lower depending on white level
    // XXX these need conversion!
    float noise = sqrt(params.noise_a + params.noise_b * max(0.0, v) * s)/s;
    // buf.v[wd*ht * 4 + wd*(ipos.y/2) + ipos.x/2] = float16_t(noise);
    buf.v[idx-c+4] = float16_t(noise);
  }
#endif
}
